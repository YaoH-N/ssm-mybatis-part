<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mapper.EmployeeMapper">

    <!--
        #{ key } : 占位符 + 赋值  emp_id = ?   ? = 赋值
        ${ key } : 字符串拼接   "emp_id = " + id

        推荐使用#{key} 防止【sql注入攻击】
    -->
    <select id="queryById" resultType="com.atguigu.pojo.Employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_id = #{id}
    </select>

    <!-- 场景1：传入的单个简单类型   key 随便写   一般情况下推荐使用参数名 -->
    <delete id="deleteById">
        delete from t_emp where emp_id = #{id}
    </delete>


    <select id="queryBySalary" resultType="com.atguigu.pojo.Employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_salary = #{salary}
    </select>

    <!-- 场景2： 传入的是一个实体对象 key 如何写？ key = 属性名即可 -->
    <insert id="insertEmp">
        insert into t_emp(emp_name, emp_salary)
        values (#{empName}, #{empSalary})
    </insert>

    <!--
        场景3： 传入多个简单类型数据如何取值  key！
            可以不可以随便写？  不可以！
            按照形参名称获取？  也不可以！
            方案1：注解指定  @Param注解  指定多个简单参数的key    key = @param("value值")  [推荐]
            方案2：mybatis默认机制    根据参数顺序  ->  arg0 arg1 .... 形参左到右依次对应arg0、arg1 ....
                    (name,salary)  name -> key = arg0   salary -> key = arg1
                    param1 param2 ...
                    (name,salary)  name -> key = param0   salary -> key = param1
    -->
    <select id="queryByNameAadSalary" resultType="com.atguigu.pojo.Employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_name = #{a} and emp_salary = #{b}
    </select>


    <!-- 场景4： 传入map 如何指定 key   key = map的key值即可！ -->
    <insert id="insertEmpMap">
        insert into t_emp (emp_name, emp_salary)
        values (#{name}, #{salary})
    </insert>

</mapper>